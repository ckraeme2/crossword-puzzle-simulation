Charles Kraemer

	From the user's perspective, the program accepts a set of words, either inputted one-by-one via the keyboard or via an input file containing the set, and proceeds to generate a crossword puzzle from that set.  If the user is providing the words via an input file, they are expected to input the name of that file at the command line when they run the program.  Once the crossword puzzle is generated, both its solution and the game itself are displayed to the user on the monitor.  First, the solution is displayed, and then the game is displayed alongside a list of anagram hints. The hints provide the coordinates of the first letter of the given word on the board, the way that the word is oriented on the board (whether it is across or down), and an iteration of the given word in which its letters are scrambled.  If the user would like, they can also enter the name of a second text file at the command line when they run the program, and the crossword puzzle corresponding to the input file will be output to that file.
	Internally, the program is structured as such: it consists of the definition of a class for the board of the crossword puzzle, alongside an implementation file for that class, and also alongside a main file which manipulates a variable of the board class so as to generate and display a crossword puzzle from user input.  The board class has some private variables which are important to its functioning.  One of these variables, set, is a vector consisting of strings corresponding to the words for the given crossword puzzle.  Within the main function, this set of strings is ordered in terms of decreasing length and then passed to a variable of the board class such that the set of words will automatically be in decreasing order within the board class functions.  Once the board class variable has received the set of words, it begins by placing the first, longest word from the set across the center of the board. After the first word has been placed, for each next word, a function is used to check whether or not that word shares a letter with another word on the board.  If the word does not share a letter with any present word on the board, the program outputs an error message.  Otherwise, the program will continue to check if the word can be fit onto the board given the rules of the game.  In this segment of the process, the program loops through the word of interest on both sides of its intersection with the word that it shares a letter with, and the conditionals are used to count the number of letters adjacent to each space that a letter of the word could potentially be placed onto.  If any letter of the word would be adjacent to the letter of another word besided the intersection point, the word cannot be placed.  If the word cannot be placed, an error message is output to the monitor.  Once each word has been given a place on the board, a solution is first displayed, where each point on the board that does not contain a letter is represented by a period.  Once the solution has been generated, the game itself is generated by incrementing through each point on the board in a nested for loop, converting letters to blank spaces and periods to hashtag symbols.  A set of anagram hints is displayed below the game, consisting of shuffled iterations of each word in the game.  These iterations are produced using the function "random_shuffle" of the algorithm library for c++.  The main program consists of three different modes in which the crossword puzzle can be generated.  In the first mode, the user enters nothing at the command line and is then prompted to input each word manually.  In the second mode, the user inputs the name of a file consisting of words at the command line and the program loops through the file, getting a line for each word until it reads a period from the file.  In the third mode, the user inputs the name of both an input and an output file at the command line, and the output crossword game is output to the output file instead of to the monitor.  The program determines which mode to use by checking the value of the 'argc' variable using conditionals.
	I verified that the program would work in each case by running it in as many cases as possible.  The program produced its output successfuly in each of the three modes.  It also successfully outputted error messages when a word provided by the user could not be considered for use in the game, or when a word could not be fit onto the board, or if the user input more than two file names at the command line.  Given that the program ran successfuly in each case that it was designed for, and given that it provides users with error messages when they prompt it to do something that it cannot do, I am condifent in its performance.
